{"version":3,"sources":["../../src/clippingsparser.js","../../src/index.js","App.js","index.js"],"names":["fetch","response","text","chunks","highlights","this","highlight","grouped","item","title","titleHighlights","metadata","lines","trimmed","rest","items","constructor","selectedBook","selectedBookHighlights","highlightsTable","url","props","parser","state","groupedHighlights","console","evt","CustomMenu","labeledBy","useState","ref","style","className","aria-labelledby","autoFocus","placeholder","onChange","e","setValue","value","React","child","Dropdown","id","as","Object","book","onClick","key","eventKey","map","body","App","ReactDOM","render","document","getElementById"],"mappings":"2VAIA,E,uIAGI,G,+FACyBA,MAArB,G,cAAIC,E,gBACaA,EAAjB,O,cAAIC,E,OACAC,EAASD,QAAb,cACIE,EAAaD,EAAA,IAAWE,KAAX,wBAAuC,SAAUC,GAC9D,WAAOA,KAGPC,EAAJ,GACAH,WAAmB,SAAUI,GACzB,IACA,EADIC,EAAQD,EAAZ,WAGA,IAAID,MACAG,KACAH,QAEAG,EAAkBH,EAAlBG,GAGJA,OAAqB,CACjBC,SAAUH,EADO,SAEjBN,KAAMM,EAAKN,U,kBAInB,G,6IAKU,GACV,IACIU,EADUV,EAAd,OACYW,MAAZ,MACIJ,EAAQG,KAAZ,OACID,EAAWC,EAAf,GACIE,EAAOF,QAAX,GAGA,QAAIH,eAAuBE,aAA3B,4BAIA,IAAIG,IACAA,EAAOA,aAAPA,QAEG,CACHL,MADG,EAEHE,SAFG,EAGHT,KAAMY,M,sCAKC,GACX,IAAIP,EAAJ,GAiBA,OAhBAQ,WAAc,SAAUP,GACpB,IACA,EADIC,EAAQD,EAAZ,WAGA,IAAID,MACAG,KACAH,QAEAG,EAAkBH,EAAlBG,GAGJA,OAAqB,CACjBC,SAAUH,EADO,SAEjBN,KAAMM,EAAKN,UAGnB,M,yDCxENc,WAAW,GAAQ,kCACjB,gBACA,MAAa,CACXC,aADW,SAEXC,uBAFW,GAGXC,gBAHW,GAIXC,IAAKC,EAAMD,KAEb,cAAmB,cAAnB,KAAmB,gBARF,E,0LAWbE,EAAS,IAAb,E,SAC8BA,QAAajB,KAAKkB,MAAhD,K,OAAIC,E,OAEJnB,KAAA,UAAekB,YAAD,MAAY,CACxBJ,gBAAiBK,M,gJAKnBnB,KAAA,qBACAA,KAAA,0B,kCAGS,GACToB,YAAYC,gBAAZD,aACApB,KAAA,cAAmBqB,gBAAnB,e,oCAGW,GAAY,WACvBrB,KAAA,UAAekB,YAAD,MAAY,CACxBN,aADwB,EAExBC,uBACE,2BACE,wBADF,GAC0C,S,+BAIvC,WAKDS,EAAa,gBACjB,cAAuE,IAAtE,EAAsE,EAAtE,WAAsE,EAAtE,QAAsE,EAAtE,UAAiDC,EAAqB,EAAxC,mBAAwC,EAC3CC,mBAA1B,IADqE,mBAC/D,EAD+D,KAC/D,EAD+D,KAGrE,OACE,yBACEC,IADF,EAEEC,MAFF,EAGEC,UAHF,EAIEC,kBAAiBL,GAEjB,uBACEM,WADF,EAEEF,UAFF,mBAGEG,YAHF,oBAIEC,SAAWC,YAAD,OAAOC,EAASD,SAJ5B,QAKEE,MAAOA,IAET,wBAAIP,UAAU,iBACXQ,gCACEC,YAAD,OACGF,GAASE,wCAjBpB,WAwBJ,OACE,6BACE,2BACE,kBAACC,EAAA,EAAD,QAAiBC,GAAG,8BACjBtC,KAAKkB,MAFV,cAKE,kBAACmB,EAAA,EAAD,MAAeE,GAAIjB,GAEfkB,OAAA,KAAYxC,KAAKkB,MAAjB,sBAA6CuB,YAC3C,OACE,kBAACJ,EAAA,EAAD,MACEK,QAAS,EADX,YAEEJ,GAAE,sBAFJ,GAGEK,IAAG,sBAHL,GAIEC,SAAUH,GALd,QAeR,uBAxBF,MAyBGzC,KAAKkB,MAAML,uBAAuBgC,KAAI1C,YACrC,OAAQ,uBAAM2C,MAAI,GAAE3C,EAApB,c,GAnGV,aCIe4C,G,MALH,WACV,OAAO,kBAAC,EAAD,CACLhC,IAAI,gECHRiC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.747b7e1f.chunk.js","sourcesContent":["//\r\n// Parse Kindle clippings file. Code adapted from\r\n// https://github.com/sole/kindle-clippings-parser\r\n//\r\nclass ClippingsParser {\r\n\r\n    // Main entry point\r\n    async parse(url) {\r\n        let response = await fetch(url);\r\n        let text = await response.text();\r\n        var chunks = text.split('==========');\r\n        var highlights = chunks.map(this.parseHighlight).filter(function (highlight) {\r\n            return highlight !== false;\r\n        });\r\n        \r\n        var grouped = {};\r\n        highlights.forEach(function (item) {\r\n            var title = item.title;\r\n            var titleHighlights;\r\n\r\n            if (grouped[title] === undefined) {\r\n                titleHighlights = [];\r\n                grouped[title] = titleHighlights;\r\n            } else {\r\n                titleHighlights = grouped[title];\r\n            }\r\n\r\n            titleHighlights.push({\r\n                metadata: item.metadata,\r\n                text: item.text\r\n            });\r\n        });\r\n        \r\n        return grouped;\r\n        \r\n    }\r\n\r\n    // Return just the highlights, not the notes\r\n    parseHighlight(text) {\r\n        var trimmed = text.trim();\r\n        var lines = trimmed.split('\\n');\r\n        var title = lines[0].trim();\r\n        var metadata = lines[1];\r\n        var rest = lines.slice(2);\r\n\r\n        // Only return highlights\r\n        if (title.length === 0 || !metadata.startsWith(\"- Your Highlight\")) {\r\n            return false;\r\n        }\r\n\r\n        if (rest !== undefined) {\r\n            rest = rest.join('\\n').trim();\r\n        }\r\n        return {\r\n            title: title,\r\n            metadata: metadata,\r\n            text: rest\r\n        };\r\n    }\r\n\r\n    // Group highlights by title\r\n    groupHighlights(items) {\r\n        var grouped = {};\r\n        items.forEach(function (item) {\r\n            var title = item.title;\r\n            var titleHighlights;\r\n\r\n            if (grouped[title] === undefined) {\r\n                titleHighlights = [];\r\n                grouped[title] = titleHighlights;\r\n            } else {\r\n                titleHighlights = grouped[title];\r\n            }\r\n\r\n            titleHighlights.push({\r\n                metadata: item.metadata,\r\n                text: item.text\r\n            });\r\n        });\r\n        return grouped;\r\n    }\r\n}\r\n\r\nexport default ClippingsParser;","import React, { Component, useState } from \"react\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Card from 'react-bootstrap/Card'\nimport FormControl from 'react-bootstrap/FormControl'\nimport ClippingsParser from \"./clippingsparser\";\n\nclass KindleClippings extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      selectedBook: \"Select\",\n      selectedBookHighlights: [],\n      highlightsTable: {},\n      url: props.url\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  async getHighlightsTable() {\n    let parser = new ClippingsParser();\n    let groupedHighlights = await parser.parse(this.state.url);\n\n    this.setState((state) => ({\n      highlightsTable: groupedHighlights\n    }));\n  }\n\n  componentDidMount() {\n    this.getHighlightsTable();\n    this.getHighlights(\"Select\");\n  }\n\n  handleClick(evt) {\n    console.log(evt.currentTarget.textContent)\n    this.getHighlights(evt.currentTarget.textContent)\n  }\n\n  getHighlights(bookTitle) {\n    this.setState((state) => ({\n      selectedBook: bookTitle,\n      selectedBookHighlights:\n        this.state.highlightsTable[bookTitle] ?\n          this.state.highlightsTable[bookTitle] : []\n    }));\n  }\n\n  render() {\n\n\n    // forwardRef again here!\n    // Dropdown needs access to the DOM of the Menu to measure it\n    const CustomMenu = React.forwardRef(\n      ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\n        const [value, setValue] = useState('');\n\n        return (\n          <div\n            ref={ref}\n            style={style}\n            className={className}\n            aria-labelledby={labeledBy}\n          >\n            <FormControl\n              autoFocus\n              className=\"mx-3 my-2 w-auto\"\n              placeholder=\"Type to filter...\"\n              onChange={(e) => setValue(e.target.value)}\n              value={value}\n            />\n            <ul className=\"list-unstyled\">\n              {React.Children.toArray(children).filter(\n                (child) =>\n                  !value || child.props.children.toLowerCase().includes(value),\n              )}\n            </ul>\n          </div>\n        );\n      },\n    );\n    return (\n      <div>\n        <Dropdown>\n          <Dropdown.Toggle id=\"dropdown-custom-components\">\n            {this.state.selectedBook}\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu as={CustomMenu}>\n            {\n              Object.keys(this.state.highlightsTable).map((book) => {\n                return (\n                  <Dropdown.Item\n                    onClick={this.handleClick}\n                    id={`bookdropdown${book}`}\n                    key={`bookdropdown${book}`}\n                    eventKey={book}\n                  >\n                    {book}\n                  </Dropdown.Item>\n                )\n              })\n            }\n\n          </Dropdown.Menu>\n        </Dropdown>\n        <br />\n        {this.state.selectedBookHighlights.map(item => {\n          return (<Card body>{item.text}</Card>)\n        })}\n\n      </div>\n    );\n  }\n\n}\n\nexport default KindleClippings;","import React from 'react'\n\nimport KindleClippings  from 'react-kindle-clippings'\nimport 'react-kindle-clippings/dist/index.css'\n\nconst App = () => {\n  return <KindleClippings \n    url=\"https://thisisrajiraj.github.io/posts/kindleclippings.txt\" />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}