{"version":3,"sources":["../../src/clippingsparser.js","../../src/index.js","App.js","index.js"],"names":["ClippingsParser","parse","url","fetch","response","highlights","text","highlight","grouped","item","title","titleHighlights","metadata","parseHighlight","lines","trimmed","rest","groupHighlights","items","KindleClippings","selectedBook","selectedBookHighlights","highlightsTable","props","getHighlightsTable","parser","groupedHighlights","componentDidMount","this","handleClick","console","evt","getHighlights","render","remaining","Object","state","remainingStr","Dropdown","onClick","id","key","eventKey","disabled","CustomMenu","children","style","className","labeledBy","useState","value","setValue","ref","aria-labelledby","autoFocus","placeholder","onChange","e","child","as","book","map","body","Component","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.83d38f4b.chunk.js","sourcesContent":["//\r\n// Parse Kindle clippings file. Code adapted from\r\n// https://github.com/sole/kindle-clippings-parser\r\n//\r\nclass ClippingsParser {\r\n\r\n    // Main entry point\r\n    async parse(url) {\r\n        let response = await fetch(url);\r\n        let text = await response.text();\r\n        var chunks = text.split('==========');\r\n        var highlights = chunks.map(this.parseHighlight).filter(function (highlight) {\r\n            return highlight !== false;\r\n        });\r\n        \r\n        var grouped = {};\r\n        highlights.forEach(function (item) {\r\n            var title = item.title;\r\n            var titleHighlights;\r\n\r\n            if (grouped[title] === undefined) {\r\n                titleHighlights = [];\r\n                grouped[title] = titleHighlights;\r\n            } else {\r\n                titleHighlights = grouped[title];\r\n            }\r\n\r\n            titleHighlights.push({\r\n                metadata: item.metadata,\r\n                text: item.text\r\n            });\r\n        });\r\n        \r\n        return grouped;\r\n        \r\n    }\r\n\r\n    // Return just the highlights, not the notes\r\n    parseHighlight(text) {\r\n        var trimmed = text.trim();\r\n        var lines = trimmed.split('\\n');\r\n        var title = lines[0].trim();\r\n        var metadata = lines[1];\r\n        var rest = lines.slice(2);\r\n\r\n        // Only return highlights\r\n        if (title.length === 0 || !metadata.startsWith(\"- Your Highlight\")) {\r\n            return false;\r\n        }\r\n\r\n        if (rest !== undefined) {\r\n            rest = rest.join('\\n').trim();\r\n        }\r\n        return {\r\n            title: title,\r\n            metadata: metadata,\r\n            text: rest\r\n        };\r\n    }\r\n\r\n    // Group highlights by title\r\n    groupHighlights(items) {\r\n        var grouped = {};\r\n        items.forEach(function (item) {\r\n            var title = item.title;\r\n            var titleHighlights;\r\n\r\n            if (grouped[title] === undefined) {\r\n                titleHighlights = [];\r\n                grouped[title] = titleHighlights;\r\n            } else {\r\n                titleHighlights = grouped[title];\r\n            }\r\n\r\n            titleHighlights.push({\r\n                metadata: item.metadata,\r\n                text: item.text\r\n            });\r\n        });\r\n        return grouped;\r\n    }\r\n}\r\n\r\nexport default ClippingsParser;","import React, { Component, useState } from \"react\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Card from 'react-bootstrap/Card'\nimport FormControl from 'react-bootstrap/FormControl'\nimport ClippingsParser from \"./clippingsparser\";\n\nclass KindleClippings extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      selectedBook: \"Select\",\n      selectedBookHighlights: [],\n      highlightsTable: {},\n      url: props.url\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  async getHighlightsTable() {\n    let parser = new ClippingsParser();\n    let groupedHighlights = await parser.parse(this.state.url);\n\n    this.setState((state) => ({\n      highlightsTable: groupedHighlights\n    }));\n  }\n\n  componentDidMount() {\n    this.getHighlightsTable();\n    this.getHighlights(\"Select\");\n  }\n\n  handleClick(evt) {\n    console.log(evt.currentTarget.textContent)\n    this.getHighlights(evt.currentTarget.textContent)\n  }\n\n  getHighlights(bookTitle) {\n    this.setState((state) => ({\n      selectedBook: bookTitle,\n      selectedBookHighlights:\n        this.state.highlightsTable[bookTitle] ?\n          this.state.highlightsTable[bookTitle] : []\n    }));\n  }\n\n  render() {\n    const numBooksToShow = 5;\n\n    let remaining = Object.keys(this.state.highlightsTable).length\n      - numBooksToShow;\n    let remainingStr = undefined;\n    if (remaining > 0) {\n      remainingStr =\n        <Dropdown.Item\n          onClick={this.handleClick}\n          id={`bookdropdownMore`}\n          key={`bookdropdownMore`}\n          eventKey=\"Select\"\n          disabled=\"true\"\n        >\n          {`...there are more books. Type book name you are looking for.`}\n        </Dropdown.Item>\n    }\n    // forwardRef again here!\n    // Dropdown needs access to the DOM of the Menu to measure it\n    const CustomMenu = React.forwardRef(\n      ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\n        const [value, setValue] = useState('');\n\n        return (\n          <div\n            ref={ref}\n            style={style}\n            className={className}\n            aria-labelledby={labeledBy}\n          >\n            <FormControl\n              autoFocus\n              className=\"mx-3 my-2 w-auto\"\n              placeholder=\"Type to filter...\"\n              onChange={(e) => setValue(e.target.value)}\n              value={value}\n            />\n            <ul className=\"list-unstyled\">\n              {React.Children.toArray(children).filter(\n                (child) =>\n                  !value || child.props.children.toLowerCase().includes(value),\n              )\n                .slice(0, numBooksToShow)}\n\n              {remainingStr}\n            </ul>\n          </div>\n        );\n      },\n    );\n    return (\n      <div>\n        <Dropdown>\n          <Dropdown.Toggle id=\"dropdown-custom-components\">\n            {this.state.selectedBook}\n          </Dropdown.Toggle>\n\n          <Dropdown.Menu as={CustomMenu}>\n            {\n              // Show just the top 5 books\n              Object.keys(this.state.highlightsTable)\n                .map((book) => {\n                  return (\n                    <Dropdown.Item\n                      onClick={this.handleClick}\n                      id={`bookdropdown${book}`}\n                      key={`bookdropdown${book}`}\n                      eventKey={book}\n                    >\n                      {book}\n                    </Dropdown.Item>\n                  )\n                })\n            }\n          </Dropdown.Menu>\n        </Dropdown>\n        <br />\n        {this.state.selectedBookHighlights.map(item => {\n          return (<Card body>{item.text}</Card>)\n        })}\n\n      </div>\n    );\n  }\n\n}\n\nexport default KindleClippings;","import React from 'react'\n\nimport KindleClippings  from 'react-kindle-clippings'\nimport 'react-kindle-clippings/dist/index.css'\n\nconst App = () => {\n  return <KindleClippings \n    url=\"https://thisisrajiraj.github.io/posts/kindleclippings.txt\" />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}