{"version":3,"sources":["../../src/clippingsparser.js","../../src/index.js","App.js","index.js"],"names":["ClippingsParser","parse","url","fetch","response","highlights","text","highlight","grouped","i","item","title","titleHighlights","location","date","parseHighlight","lines","trimmed","metadata","rest","metachunks","KindleClippings","selectedBook","selectedBookHighlights","highlightsTable","props","getHighlightsTable","parser","groupedHighlights","componentDidMount","this","getHighlights","render","id","value","state","onChange","options","Object","getOptionLabel","style","width","paddingTop","renderInput","label","variant","map","Card","className","Component","App","ReactDOM","document","getElementById"],"mappings":"ueAIMA,a,yCAGIC,eAAMC,G,IAAK,kCACQC,MADR,6CAEIC,EAFJ,0BASb,IANA,IACIC,EADSC,QAAb,cACiB,IAAW,EAAX,wBAAuC,SAAUC,GAC9D,WAAOA,KAGPC,EAAJ,GACSC,EAAIJ,SAAb,EAAoCI,GAApC,EAA2CA,IAAK,CAC5C,IAEA,EAFIC,EAAOL,EAAX,GACIM,EAAQD,EAAZ,WAGA,IAAIF,MACAI,KACAJ,QAEAI,EAAkBJ,EAAlBI,GAGJA,OAAqB,CACjBC,SAAUH,EADO,SAEjBI,KAAKJ,EAFY,KAGjBJ,KAAMI,EAAKJ,OAGnB,eACH,S,6BAGDS,2BACI,IACIC,EADUV,EAAd,OACYW,MAAZ,MACIN,EAAQK,KAAZ,OACIE,EAAWF,EAAf,GACIG,EAAOH,QAAX,GAGA,GAAIL,eAAuBO,aAA3B,oBACI,cAGJ,IAAIC,IACAA,EAAOA,aAAPA,QAEJ,IAAIC,EAAaF,QAAjB,KACIL,EAAJ,EACIC,EAAJ,GAKA,OAJIM,SAAJ,IACIP,EAAWO,uBAAXP,IACAC,EAAOM,EAAPN,IAEG,CACHH,MADG,EAEHE,SAFG,EAGHC,KAHG,EAIHR,KAAMa,I,EA5DZnB,G,ECEAqB,Y,QACJ,cAAmB,aACjB,sBACA,MAAa,CACXC,aADW,SAEXC,uBAFW,GAGXC,gBAHW,GAIXtB,IAAKuB,EAAMvB,KANI,E,kHASbwB,8B,IAAqB,WACrBC,EAAS,IAAb,EADyB,uBAEKA,QAAa,QAFlB,wBAIzB,YAAc,kBAAY,CACxBH,gBAAiBI,SAEpB,S,6BAEDC,6BACEC,KAAA,qBACAA,KAAA,yB,EAGFC,0BAAyB,WACvBD,KAAA,UAAc,kBAAY,CACxBR,aADwB,EAExBC,uBACE,2BACE,wBADF,GAC0C,Q,EAIhDS,kBAAS,WAEP,OACE,6BACE,uBACEC,GADF,qBAEEC,MAAOJ,KAAKK,MAFd,aAGEC,SAAU,cACR,oBAEFC,QAASC,YAAYR,KAAKK,MAN5B,iBAOEI,eAAgB,sBAChBC,MAAO,CAAEC,MAAF,IAAcC,WAAY,IACjCC,YAAa,mBAAY,8BAAuBC,MAAvB,mBAAgDC,QAAQ,iBAEnF,uBAZF,MAaGf,KAAKK,MAAMZ,uBAAuBuB,KAAI,SAAApC,GACrC,OACA,2BACE,kBAACqC,EAAA,EAAD,UACE,gCAAYC,UAAU,mBACpB,2BACCtC,EAFH,MAIE,4BAAQsC,UAAU,qBACftC,EADH,aACkB,0BAAMC,MAAM,gBAAgBD,EARpD,e,EAlDJW,CAAwB4B,aCIfC,G,MALH,WACV,OAAO,kBAAC,EAAD,CACLhD,IAAI,gECHRiD,IAASnB,OAAO,kBAAC,EAAD,MAASoB,SAASC,eAAe,W","file":"static/js/main.bd13d188.chunk.js","sourcesContent":["//\r\n// Parse Kindle clippings file. Code adapted from\r\n// https://github.com/sole/kindle-clippings-parser\r\n//\r\nclass ClippingsParser {\r\n\r\n    // Main entry point\r\n    async parse(url) {\r\n        let response = await fetch(url);\r\n        let text = await response.text();\r\n        var chunks = text.split('==========');\r\n        var highlights = chunks.map(this.parseHighlight).filter(function (highlight) {\r\n            return highlight !== false;\r\n        });\r\n        \r\n        var grouped = {};\r\n        for (let i = highlights.length - 1; i >=0; i--) {\r\n            let item = highlights[i];\r\n            var title = item.title;\r\n            var titleHighlights;\r\n\r\n            if (grouped[title] === undefined) {\r\n                titleHighlights = [];\r\n                grouped[title] = titleHighlights;\r\n            } else {\r\n                titleHighlights = grouped[title];\r\n            }\r\n\r\n            titleHighlights.push({\r\n                location: item.location,\r\n                date:item.date,\r\n                text: item.text\r\n            });\r\n        }\r\n        return grouped;        \r\n    }\r\n\r\n    // Return just the highlights, not the notes\r\n    parseHighlight(text) {\r\n        var trimmed = text.trim();\r\n        var lines = trimmed.split('\\n');\r\n        var title = lines[0].trim();\r\n        var metadata = lines[1];\r\n        var rest = lines.slice(2);\r\n\r\n        // Only return highlights\r\n        if (title.length === 0 || !metadata.startsWith(\"- Your Highlight\")) {\r\n            return false;\r\n        }\r\n\r\n        if (rest !== undefined) {\r\n            rest = rest.join('\\n').trim();\r\n        }\r\n        var metachunks = metadata.split(\"|\");\r\n        let location = metadata;\r\n        let date = \"\";\r\n        if (metachunks.length > 1) {\r\n            location = metachunks[0].replace(\"- Your \",\"\");\r\n            date = metachunks[1];\r\n        }\r\n        return {\r\n            title: title,\r\n            location: location,\r\n            date:date,\r\n            text: rest\r\n        };\r\n    }\r\n}\r\n\r\nexport default ClippingsParser;","import React, { Component } from \"react\";\nimport Card from 'react-bootstrap/Card'\nimport ClippingsParser from \"./clippingsparser\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\n\nclass KindleClippings extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      selectedBook: \"Select\",\n      selectedBookHighlights: [],\n      highlightsTable: {},\n      url: props.url\n    };\n  }\n  async getHighlightsTable() {\n    let parser = new ClippingsParser();\n    let groupedHighlights = await parser.parse(this.state.url);\n\n    this.setState((state) => ({\n      highlightsTable: groupedHighlights\n    }));\n  }\n\n  componentDidMount() {\n    this.getHighlightsTable();\n    this.getHighlights(\"Select\");\n  }\n\n  getHighlights(bookTitle) {\n    this.setState((state) => ({\n      selectedBook: bookTitle,\n      selectedBookHighlights:\n        this.state.highlightsTable[bookTitle] ?\n          this.state.highlightsTable[bookTitle] : []\n    }));\n  }\n\n  render() {\n\n    return (\n      <div>\n        <Autocomplete\n          id=\"bookTitlesDropDown\"\n          value={this.state.selectedBook}\n          onChange={(event, newValue) => {\n            this.getHighlights(newValue);\n          }}\n          options={Object.keys(this.state.highlightsTable)}\n          getOptionLabel={(option) => option}\n          style={{ width: 300, paddingTop: 10 }}\n          renderInput={(params) => <TextField {...params} label=\"Type a book name\" variant=\"outlined\" />}\n        />\n        <br />\n        {this.state.selectedBookHighlights.map(item => {\n          return (\n          <Card>\n            <Card.Body>\n              <blockquote className=\"blockquote mb-0\">\n                <p>\n                {item.text}\n                </p>\n                <footer className=\"blockquote-footer\">\n                  {item.location} <cite title=\"Source Title\">{item.date}</cite>\n                </footer>\n              </blockquote>\n            </Card.Body>\n          </Card>)\n        })}\n\n      </div>\n    );\n  }\n\n}\n\nexport default KindleClippings;","import React from 'react'\n\nimport KindleClippings  from 'react-kindle-clippings'\nimport 'react-kindle-clippings/dist/index.css'\n\nconst App = () => {\n  return <KindleClippings \n    url=\"https://thisisrajiraj.github.io/posts/kindleclippings.txt\" />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}