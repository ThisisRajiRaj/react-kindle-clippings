{"version":3,"sources":["../../src/clippingsparser.js","../../src/index.js","App.js","index.js"],"names":["ClippingsParser","parse","url","fetch","response","highlights","text","highlight","grouped","item","title","titleHighlights","metadata","parseHighlight","lines","trimmed","rest","groupHighlights","items","KindleClippings","selectedBook","selectedBookHighlights","highlightsTable","props","getHighlightsTable","parser","groupedHighlights","componentDidMount","this","getHighlights","render","id","value","state","onChange","options","Object","getOptionLabel","style","width","paddingTop","renderInput","label","variant","map","body","Component","App","ReactDOM","document","getElementById"],"mappings":"ueAIMA,a,yCAGIC,eAAMC,G,IAAK,kCACQC,MADR,6CAEIC,EAFJ,0BAGb,IACIC,EADSC,QAAb,cACiB,IAAW,EAAX,wBAAuC,SAAUC,GAC9D,WAAOA,KAGPC,EAAJ,GAkBA,OAjBAH,WAAmB,SAAUI,GACzB,IACA,EADIC,EAAQD,EAAZ,WAGA,IAAID,MACAG,KACAH,QAEAG,EAAkBH,EAAlBG,GAGJA,OAAqB,CACjBC,SAAUH,EADO,SAEjBH,KAAMG,EAAKH,UAInB,QAEH,S,6BAGDO,2BACI,IACIC,EADUR,EAAd,OACYS,MAAZ,MACIL,EAAQI,KAAZ,OACIF,EAAWE,EAAf,GACIE,EAAOF,QAAX,GAGA,QAAIJ,eAAuBE,aAA3B,4BAIA,IAAII,IACAA,EAAOA,aAAPA,QAEG,CACHN,MADG,EAEHE,SAFG,EAGHN,KAAMU,K,EAKdC,4BACI,IAAIT,EAAJ,GAiBA,OAhBAU,WAAc,SAAUT,GACpB,IACA,EADIC,EAAQD,EAAZ,WAGA,IAAID,MACAG,KACAH,QAEAG,EAAkBH,EAAlBG,GAGJA,OAAqB,CACjBC,SAAUH,EADO,SAEjBH,KAAMG,EAAKH,UAGnB,G,EA3EFN,G,ECEAmB,Y,QACJ,cAAmB,aACjB,sBACA,MAAa,CACXC,aADW,SAEXC,uBAFW,GAGXC,gBAHW,GAIXpB,IAAKqB,EAAMrB,KANI,E,kHASbsB,8B,IAAqB,WACrBC,EAAS,IAAb,EADyB,uBAEKA,QAAa,QAFlB,wBAIzB,YAAc,kBAAY,CACxBH,gBAAiBI,SAEpB,S,6BAEDC,6BACEC,KAAA,qBACAA,KAAA,yB,EAGFC,0BAAyB,WACvBD,KAAA,UAAc,kBAAY,CACxBR,aADwB,EAExBC,uBACE,2BACE,wBADF,GAC0C,Q,EAIhDS,kBAAS,WAEP,OACE,6BACG,uBACGC,GADH,qBAEGC,MAAOJ,KAAKK,MAFf,aAGGC,SAAU,cACR,oBAEFC,QAASC,YAAYR,KAAKK,MAN7B,iBAOGI,eAAgB,sBAChBC,MAAO,CAAEC,MAAF,IAAcC,WAAY,IACjCC,YAAa,mBAAY,8BAAuBC,MAAvB,mBAAgDC,QAAQ,iBAErF,uBAZF,MAaGf,KAAKK,MAAMZ,uBAAuBuB,KAAI,SAAAnC,GACrC,OAAQ,uBAAMoC,MAAI,GAAEpC,EAApB,W,EAlDJU,CAAwB2B,aCIfC,G,MALH,WACV,OAAO,kBAAC,EAAD,CACL7C,IAAI,gECHR8C,IAASlB,OAAO,kBAAC,EAAD,MAASmB,SAASC,eAAe,W","file":"static/js/main.d7786095.chunk.js","sourcesContent":["//\r\n// Parse Kindle clippings file. Code adapted from\r\n// https://github.com/sole/kindle-clippings-parser\r\n//\r\nclass ClippingsParser {\r\n\r\n    // Main entry point\r\n    async parse(url) {\r\n        let response = await fetch(url);\r\n        let text = await response.text();\r\n        var chunks = text.split('==========');\r\n        var highlights = chunks.map(this.parseHighlight).filter(function (highlight) {\r\n            return highlight !== false;\r\n        });\r\n        \r\n        var grouped = {};\r\n        highlights.forEach(function (item) {\r\n            var title = item.title;\r\n            var titleHighlights;\r\n\r\n            if (grouped[title] === undefined) {\r\n                titleHighlights = [];\r\n                grouped[title] = titleHighlights;\r\n            } else {\r\n                titleHighlights = grouped[title];\r\n            }\r\n\r\n            titleHighlights.push({\r\n                metadata: item.metadata,\r\n                text: item.text\r\n            });\r\n        });\r\n        \r\n        return grouped;\r\n        \r\n    }\r\n\r\n    // Return just the highlights, not the notes\r\n    parseHighlight(text) {\r\n        var trimmed = text.trim();\r\n        var lines = trimmed.split('\\n');\r\n        var title = lines[0].trim();\r\n        var metadata = lines[1];\r\n        var rest = lines.slice(2);\r\n\r\n        // Only return highlights\r\n        if (title.length === 0 || !metadata.startsWith(\"- Your Highlight\")) {\r\n            return false;\r\n        }\r\n\r\n        if (rest !== undefined) {\r\n            rest = rest.join('\\n').trim();\r\n        }\r\n        return {\r\n            title: title,\r\n            metadata: metadata,\r\n            text: rest\r\n        };\r\n    }\r\n\r\n    // Group highlights by title\r\n    groupHighlights(items) {\r\n        var grouped = {};\r\n        items.forEach(function (item) {\r\n            var title = item.title;\r\n            var titleHighlights;\r\n\r\n            if (grouped[title] === undefined) {\r\n                titleHighlights = [];\r\n                grouped[title] = titleHighlights;\r\n            } else {\r\n                titleHighlights = grouped[title];\r\n            }\r\n\r\n            titleHighlights.push({\r\n                metadata: item.metadata,\r\n                text: item.text\r\n            });\r\n        });\r\n        return grouped;\r\n    }\r\n}\r\n\r\nexport default ClippingsParser;","import React, { Component } from \"react\";\nimport Card from 'react-bootstrap/Card'\nimport ClippingsParser from \"./clippingsparser\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\n\nclass KindleClippings extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      selectedBook: \"Select\",\n      selectedBookHighlights: [],\n      highlightsTable: {},\n      url: props.url\n    };\n  }\n  async getHighlightsTable() {\n    let parser = new ClippingsParser();\n    let groupedHighlights = await parser.parse(this.state.url);\n\n    this.setState((state) => ({\n      highlightsTable: groupedHighlights\n    }));\n  }\n\n  componentDidMount() {\n    this.getHighlightsTable();\n    this.getHighlights(\"Select\");\n  }\n\n  getHighlights(bookTitle) {\n    this.setState((state) => ({\n      selectedBook: bookTitle,\n      selectedBookHighlights:\n        this.state.highlightsTable[bookTitle] ?\n          this.state.highlightsTable[bookTitle] : []\n    }));\n  }\n\n  render() {\n    \n    return (\n      <div>\n         <Autocomplete\n            id=\"bookTitlesDropDown\"\n            value={this.state.selectedBook}\n            onChange={(event, newValue) => {\n              this.getHighlights(newValue);\n            }}\n            options={Object.keys(this.state.highlightsTable)}\n            getOptionLabel={(option) => option}\n            style={{ width: 300, paddingTop: 10 }}\n            renderInput={(params) => <TextField {...params} label=\"Type a book name\" variant=\"outlined\" />}\n          />\n        <br />\n        {this.state.selectedBookHighlights.map(item => {\n          return (<Card body>{item.text}</Card>)\n        })}\n\n      </div>\n    );\n  }\n\n}\n\nexport default KindleClippings;","import React from 'react'\n\nimport KindleClippings  from 'react-kindle-clippings'\nimport 'react-kindle-clippings/dist/index.css'\n\nconst App = () => {\n  return <KindleClippings \n    url=\"https://thisisrajiraj.github.io/posts/kindleclippings.txt\" />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}